@use "bulma/sass/utilities/css-variables" as cv;
@use "bulma/sass/utilities/derived-variables" as dv;

$theme-colors: dv.$colors !default;
$background: cv.getVar("scheme-invert") !default;
$color: cv.getVar("text-invert") !default;
$arrow-size: 8px !default;
$padding: 0.5rem !default;
$radius: cv.getVar("radius-small") !default;
$shadow: 0 5px 10px -5px hsla(cv.getVar("shadow-h"), cv.getVar("shadow-s"), cv.getVar("shadow-l"), 0.4) !default;
$popover-background: cv.getVar("background") !default;
$popover-color: cv.getVar("text") !default;
$popover-arrow-color: cv.getVar("border") !default;
$popover-shadow: $shadow !default;
$popover-radius: $radius !default;

.tippy-iOS {
  cursor: pointer !important;
  -webkit-tap-highlight-color: transparent;
}

[data-tippy-root] {
  max-width: calc(100vw - 10px);
}

.tippy-arrow {
  & {
    width: $arrow-size;
    height: $arrow-size;
    color: $background;
  }

  &::before {
    content: "";
    position: absolute;
    border-color: transparent;
    border-style: solid;
  }
}
.tippy-content {
  position: relative;
  padding: $padding;
  z-index: 1;
}

.tippy-box {
  $placements: "top", "bottom", "left", "right";
  $origins: bottom, top, right, left;

  &[data-animation="scale"] {
    @each $placement in $placements {
      &[data-placement^="#{$placement}"] {
        transform-origin: nth($origins, index($placements, $placement));
      }
    }

    &[data-state="hidden"] {
      transform: scale(0.5);
      opacity: 0;
    }
  }

  &[data-animation="fade"][data-state="hidden"] {
    opacity: 0;
  }

  position: relative;
  background-color: $background;
  color: $color;
  border-radius: $radius;
  outline: 0;
  box-shadow: $shadow;
  transition-property: transform, visibility, opacity;

  @each $name, $pair in $theme-colors {
    &[data-theme~="#{$name}"] {
      color: cv.getVar($name, "", "-invert");
      background-color: cv.getVar($name);
      .tippy-arrow {
        color: cv.getVar($name);
      }
    }
    &[data-theme~="#{$name}-light"] {
      color: cv.getVar($name, "", "-dark");
      background-color: cv.getVar($name, "", "-light");
      .tippy-arrow {
        color: cv.getVar($name, "", "-light");
      }
    }
  }

  &[data-theme~="popover"] {
    font-size: 1rem;
    border-radius: $popover-radius;
    color: $popover-color;
    background-color: $popover-background;
    box-shadow: $popover-shadow;
    .tippy-arrow {
      color: $popover-arrow-color;
    }
    .tippy-content {
      padding: 0;
    }
  }

  &[data-placement^="top"] > .tippy-arrow {
    bottom: 0;

    &::before {
      bottom: -7px;
      left: 0;
      border-width: 8px 8px 0;
      border-top-color: initial;
      transform-origin: center top;
    }
  }
  &[data-placement^="bottom"] > .tippy-arrow {
    top: 0;

    &::before {
      top: -7px;
      left: 0;
      border-width: 0 8px 8px;
      border-bottom-color: initial;
      transform-origin: center bottom;
    }
  }

  &[data-placement^="left"] > .tippy-arrow {
    right: 0;

    &::before {
      border-width: 8px 0 8px 8px;
      border-left-color: initial;
      right: -7px;
      transform-origin: center left;
    }
  }

  &[data-placement^="right"] > .tippy-arrow {
    left: 0;

    &::before {
      left: -7px;
      border-width: 8px 8px 8px 0;
      border-right-color: initial;
      transform-origin: center right;
    }
  }

  &[data-inertia][data-state="visible"] {
    transition-timing-function: cubic-bezier(0.54, 1.5, 0.38, 1.11);
  }
}
