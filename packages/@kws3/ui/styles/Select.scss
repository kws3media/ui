@use "bulma/sass/utilities/css-variables" as cv;
@use "bulma/sass/utilities/derived-variables" as dv;

$colors: dv.$colors !default;
$radius: cv.getVar("radius") !default;
$focus-border-color: hsl(
  cv.getVar("input-focus-h"),
  cv.getVar("input-focus-s"),
  cv.getVar("input-focus-l")
) !default;
$focus-box-shadow-size: cv.getVar("input-focus-shadow-size") !default;
$focus-box-shadow-color: hsl(
  cv.getVar("input-focus-h"),
  cv.getVar("input-focus-s"),
  cv.getVar("input-focus-l"),
  cv.getVar("input-focus-shadow-alpha")
) !default;
$disabled-background-color: cv.getVar(
  "input-disabled-background-color"
) !default;
$disabled-border-color: cv.getVar("input-disabled-border-color") !default;
$disabled-color: cv.getVar("input-disabled-color") !default;
$selecting-color: cv.getVar("primary-invert") !default;
$selecting-background: cv.getVar("primary") !default;
$selected-color: cv.getVar("primary-dark") !default;
$selected-background: cv.getVar("primary-light") !default;
$options-background: cv.getVar("scheme-main-ter") !default;

$__modal-z: 41 !default;
@if variable-exists("modal-z") {
  $__modal-z: $modal-z;
}

$options-z-index: $__modal-z + 1 !default;

.kws-searchableselect {
  position: relative;
  align-items: center;
  display: flex;
  cursor: text;
  height: auto;
  min-height: 2.5em;
  padding-top: calc(0.4em - 1px);
  padding-bottom: calc(0.4em - 1px);
  &:focus-within {
    border-color: $focus-border-color;
    box-shadow: $focus-box-shadow-size $focus-box-shadow-color;
  }
  &.is-disabled {
    background-color: $disabled-background-color;
    border-color: $disabled-border-color;
    color: $disabled-color;
    cursor: not-allowed;
  }
  &.is-readonly {
    box-shadow: none;
  }

  ul.tokens {
    flex-wrap: wrap;
    flex: 1;
    overflow: hidden;
    &.tags {
      margin: 0;
      margin-top: -0.25rem;
      margin-bottom: -0.25rem;
      margin-left: -0.25rem;
      margin-right: 0.25rem;
      gap: 0;
      .tag.is-small {
        font-size: 0.6rem;
        .delete.is-small {
          height: 14px;
          max-height: 14px;
          max-width: 14px;
          min-height: 14px;
          min-width: 14px;
          width: 14px;
        }
      }
    }
    & > li.tag {
      margin: 0.25rem !important;
    }
    li.tag.summary-count {
      font-weight: bold;
      margin-right: 0 !important;
    }
    li.tag.summary-text {
      margin-left: 0 !important;
    }
  }

  input {
    border: none !important;
    outline: none !important;
    background: none !important;
    /* needed to hide red shadow around required inputs in some browsers */
    box-shadow: none !important;
    color: inherit;
    flex: 1;
    padding: 1pt;
    height: auto;
    min-height: 0;
  }

  ul.options {
    list-style: none;
    max-height: 50vh;
    padding: 0;
    cursor: pointer;
    border-radius: 0 0 $radius $radius;
    overflow: auto;
    background: $options-background;
    box-shadow: 0 3px 9px rgba(0, 0, 0, 0.4);
    position: relative;
    z-index: 4;
    &[data-popper-placement="top"] {
      border-radius: $radius $radius 0 0;
      box-shadow: 0 -1px 6px rgba(0, 0, 0, 0.4);
    }
    &.hidden {
      display: none;
    }

    li {
      padding: 0.3em 0.5em;
      position: relative;
      padding-left: 2em;
      word-break: break-all;
      &:before,
      .kws-selected-icon {
        position: absolute;
        width: 1em;
        height: 1em;
        top: calc(50% - 0.5em);
        left: 0.5em;
        content: "";
        display: inline-block;
      }
      &:before {
        border: 0.05em solid currentColor;
        border-radius: 0.14em;
      }
      .kws-selected-icon {
        display: none;
        .icon {
          align-items: center;
          width: 1em !important;
          height: 1em !important;
          .icon-i {
            font-size: 0.7em;
            line-height: 1.5;
          }
        }
      }
      &.selected {
        color: $selected-color;
        background: $selected-background;
        .kws-selected-icon {
          display: inline-flex;
        }
      }
      &.active {
        // keyboard focused item
        color: $selecting-color;
        background: $selecting-background;
      }
    }

    &.is-single {
      li {
        &:before,
        .kws-selected-icon {
          display: none;
        }
        &.selected {
          .kws-selected-icon {
            display: inline-flex;
          }
          .icon-i {
            font-size: 1em;
            line-height: 1.5;
          }
        }
      }
    }

    li.no-options {
      pointer-events: none;
      padding: 0.3em 0.5em !important;
      &:before,
      &:after {
        display: none;
      }
    }
  }
}

@each $name, $pair in $colors {
  .kws-searchableselect {
    &.is-#{$name} {
      border-color: cv.getVar($name);
      &:focus-within {
        box-shadow: $focus-box-shadow-size
          hsla(
            cv.getVar($name, "", "-h"),
            cv.getVar($name, "", "-s"),
            cv.getVar($name, "", "-l"),
            cv.getVar("input-focus-shadow-alpha")
          );
      }
      ul.options {
        li {
          &.selected {
            color: cv.getVar($name, "", "-dark");
            background: cv.getVar($name, "", "-light");
          }
          &.active {
            color: cv.getVar($name, "", "-invert");
            background: cv.getVar($name);
          }
        }
      }
    }
  }
}

#kws-overlay-root {
  .kws-searchableselect {
    position: absolute;
    z-index: $options-z-index;
  }
}
