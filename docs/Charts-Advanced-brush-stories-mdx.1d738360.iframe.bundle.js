(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"./src/stories/Charts/Advanced/brush.stories.mdx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"brushCharts",(function(){return brush_stories_brushCharts}));__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var esm=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),version=(__webpack_require__("./node_modules/ts-dedent/esm/index.js"),__webpack_require__("./src/version.mdx")),internal=__webpack_require__("./node_modules/svelte/internal/index.mjs"),ui=__webpack_require__("./packages/@kws3/ui/index.js");function create_fragment(ctx){let linechart,t,barchart,current;return linechart=new ui.w({props:{options:ctx[4],colors:ctx[0],data:ctx[6],labels:ctx[7],sets:ctx[8],width:ctx[1],height:ctx[2]}}),barchart=new ui.c({props:{options:ctx[5],colors:ctx[0],data:ctx[6],labels:ctx[7],sets:ctx[8],width:ctx[1],height:ctx[3]}}),{c(){Object(internal.u)(linechart.$$.fragment),t=Object(internal.gb)(),Object(internal.u)(barchart.$$.fragment)},m(target,anchor){Object(internal.R)(linechart,target,anchor),Object(internal.O)(target,t,anchor),Object(internal.R)(barchart,target,anchor),current=!0},p(ctx,[dirty]){const linechart_changes={};16&dirty&&(linechart_changes.options=ctx[4]),1&dirty&&(linechart_changes.colors=ctx[0]),64&dirty&&(linechart_changes.data=ctx[6]),128&dirty&&(linechart_changes.labels=ctx[7]),256&dirty&&(linechart_changes.sets=ctx[8]),2&dirty&&(linechart_changes.width=ctx[1]),4&dirty&&(linechart_changes.height=ctx[2]),linechart.$set(linechart_changes);const barchart_changes={};32&dirty&&(barchart_changes.options=ctx[5]),1&dirty&&(barchart_changes.colors=ctx[0]),64&dirty&&(barchart_changes.data=ctx[6]),128&dirty&&(barchart_changes.labels=ctx[7]),256&dirty&&(barchart_changes.sets=ctx[8]),2&dirty&&(barchart_changes.width=ctx[1]),8&dirty&&(barchart_changes.height=ctx[3]),barchart.$set(barchart_changes)},i(local){current||(Object(internal.ob)(linechart.$$.fragment,local),Object(internal.ob)(barchart.$$.fragment,local),current=!0)},o(local){Object(internal.pb)(linechart.$$.fragment,local),Object(internal.pb)(barchart.$$.fragment,local),current=!1},d(detaching){Object(internal.x)(linechart,detaching),detaching&&Object(internal.z)(t),Object(internal.x)(barchart,detaching)}}}function instance($$self,$$props,$$invalidate){let{colors:colors=null,width:width="100%",height1:height1="250",height2:height2="100",options1:options1={chart:{id:"itemsChart",toolbar:{autoSelected:"pan",show:!1},zoom:{enabled:!0}},xaxis:{decimalsInFloat:0,tickAmount:5,type:"numeric"}},options2:options2={chart:{id:"brush",brush:{target:"itemsChart",enabled:!0},selection:{enabled:!0,xaxis:{min:50,max:100}}},xaxis:{type:"numeric",labels:{show:!1}},yaxis:{tickAmount:2}},data:data=[...Array(200)].map((()=>200*Math.random()|0)),labels:labels=[...Array(200).keys()],sets:sets=["Value"]}=$$props;return $$self.$$set=$$props=>{"colors"in $$props&&$$invalidate(0,colors=$$props.colors),"width"in $$props&&$$invalidate(1,width=$$props.width),"height1"in $$props&&$$invalidate(2,height1=$$props.height1),"height2"in $$props&&$$invalidate(3,height2=$$props.height2),"options1"in $$props&&$$invalidate(4,options1=$$props.options1),"options2"in $$props&&$$invalidate(5,options2=$$props.options2),"data"in $$props&&$$invalidate(6,data=$$props.data),"labels"in $$props&&$$invalidate(7,labels=$$props.labels),"sets"in $$props&&$$invalidate(8,sets=$$props.sets)},[colors,width,height1,height2,options1,options2,data,labels,sets]}class Brush_svelte_Brush extends internal.b{constructor(options){super(),Object(internal.N)(this,options,instance,create_fragment,internal.Z,{colors:0,width:1,height1:2,height2:3,options1:4,options2:5,data:6,labels:7,sets:8})}}var Brush_svelte=Brush_svelte_Brush;Brush_svelte_Brush.__docgen={version:3,name:"Brush.svelte",data:[{visibility:"public",description:null,keywords:[],name:"colors",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"object",type:"object"},defaultValue:null},{visibility:"public",description:null,keywords:[],name:"width",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"string",type:"string"},defaultValue:"100%"},{visibility:"public",description:null,keywords:[],name:"height1",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"string",type:"string"},defaultValue:"250"},{visibility:"public",description:null,keywords:[],name:"height2",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"string",type:"string"},defaultValue:"100"},{visibility:"public",description:null,keywords:[],name:"options1",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"object",type:"object"}},{visibility:"public",description:null,keywords:[],name:"options2",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"object",type:"object"}},{visibility:"public",description:null,keywords:[],name:"data",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"any",type:"any"}},{visibility:"public",description:null,keywords:[],name:"labels",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"array",type:"array"}},{visibility:"public",description:null,keywords:[],name:"sets",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"array",type:"array"}}],computed:[],methods:[],components:[],description:null,keywords:[],events:[],slots:[],refs:[]};var _excluded=["components"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return Object(esm.b)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.b)(version.a,{mdxType:"Version"}),Object(esm.b)(dist_esm.e,{title:"Charts/Advanced Examples/Brush Charts",mdxType:"Meta"}),Object(esm.b)("h3",{id:"brush-charts"},"Brush Charts"),Object(esm.b)("p",null,"It's possible to link 2 charts so that one chart will act as a brush for the other."),Object(esm.b)(dist_esm.g,{name:"Brush Charts",args:{},mdxType:"Story"},(function(args){return{Component:Brush_svelte}})),Object(esm.b)("div",{class:"content"},Object(esm.b)("p",null,"In this example, the smaller chart acts as a brush chart for the larger chart above.",Object(esm.b)("br",null),"See annotated example code below.")),Object(esm.b)("div",{class:"columns"},Object(esm.b)("div",{class:"column"},Object(esm.b)("pre",null,Object(esm.b)("code",{parentName:"pre",className:"language-jsx"},'//Large chart on top\n\n<LineChart \n  options={{\n    chart: {\n      id: "itemsChart", //ensure unique id\n      toolbar: { //this allows panning large chart\n        autoSelected: "pan",\n        show: false,\n      },\n      zoom: { \n        // panning doesn\'t work unless "zoom" is enabled\n        enabled: true,\n      },\n    },\n    xaxis: {\n      decimalsInFloat: 0,\n      tickAmount: 5,\n      // if not using timeseries data, \n      // set `type` to "numeric"\n      type: "numeric",\n    },\n  }}\n  {data}\n/>\n'))),Object(esm.b)("div",{class:"column"},Object(esm.b)("pre",null,Object(esm.b)("code",{parentName:"pre",className:"language-jsx"},'//Small chart below large chart\n\n<BarChart options={{\n    chart: {\n      id: "brush", //ensure unique id\n      brush: { //enable brushing on `traget`\n        target: "itemsChart",\n        enabled: true,\n      },\n      selection: { \n        //preselect part of chart on load\n        enabled: true,\n        xaxis: {\n          min: 50,\n          max: 100,\n        },\n      },\n    },\n    xaxis: {\n      // if not using timeseries data, \n      // set `type` to "numeric"\n      type: "numeric",\n      //hide axis labels on brush chart\n      labels: { show: false },\n    },\n    yaxis: {\n      tickAmount: 2,\n    },\n  }}\n  {data}\n  ...\n/>\n')))))}MDXContent.isMDXComponent=!0;var brush_stories_brushCharts=function brushCharts(args){return{Component:Brush_svelte}};brush_stories_brushCharts.storyName="Brush Charts",brush_stories_brushCharts.args={},brush_stories_brushCharts.parameters={storySource:{source:"args => ({\n  Component: Brush\n})"}};var componentMeta={title:"Charts/Advanced Examples/Brush Charts",includeStories:["brushCharts"]},mdxStoryNameToKey={"Brush Charts":"brushCharts"};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(esm.b)(dist_esm.a,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},Object(esm.b)(MDXContent,null))}});__webpack_exports__.default=componentMeta}}]);